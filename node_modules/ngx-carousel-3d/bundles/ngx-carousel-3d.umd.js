(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/BehaviorSubject'), require('@angular/core'), require('jquery'), require('rxjs/Observable'), require('rxjs/add/observable/timer'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', 'rxjs/BehaviorSubject', '@angular/core', 'jquery', 'rxjs/Observable', 'rxjs/add/observable/timer', '@angular/common'], factory) :
	(factory((global['ngx-carousel-3d'] = {}),global.Rx,global.ng.core,global.jqueryProxy__default__default,global.Rx,global.Rx.Observable,global.ng.common));
}(this, (function (exports,BehaviorSubject,core,jqueryProxy__default__default,Observable,timer,common) { 'use strict';

var jqueryProxy__default__default__default = jqueryProxy__default__default['default'];

var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    return Deferred;
}());
var NgxCarousel3dService = /** @class */ (function () {
    function NgxCarousel3dService(slides, params) {
        this.slides = slides || [];
        this.leftSlides = [];
        this.rightSlides = [];
        this.leftOutSlide = '';
        this.rightOutSlide = '';
        this.loadCount = 0;
        this.errorCount = 0;
        this.states = {
            PENDING: 1,
            LOADING: 2,
            RESOLVED: 3,
            REJECTED: 4
        };
        this.total = slides.length;
        this.currentIndex = 0;
        this.lock = false;
        this.loop = params.loop || false;
        this.clicking = params.clicking || false;
        this.sourceProp = params.sourceProp || '';
        this.visible = params.visible || 5;
        this.perspective = params.perspective || 35;
        this.animationSpeed = params.animationSpeed || 500;
        this.dir = params.dir || 'ltr';
        this.width = params.width || 360;
        this.height = params.height || 270;
        this.border = params.border || 0;
        this.space = params.space || 'auto';
        this.topSpace = params.topSpace || 'auto';
        this.controls = params.controls || false;
        this.startSlide = params.startSlide || 0;
        this.inverseScaling = params.inverseScaling || 300;
        this.autoRotationSpeed = params.autoRotationSpeed || 0;
        this.state = this.states.PENDING;
        this.deferred = new Deferred();
        this.promise = this.deferred.promise;
        this.percent = new BehaviorSubject.BehaviorSubject(new Object());
        this.imageLocation = new BehaviorSubject.BehaviorSubject(new Object());
    }
    NgxCarousel3dService.prototype.build = function (model, params) {
        var carousel = this;
        return carousel.load().promise.then(function () {
            carousel.visible = (carousel.visible > carousel.total) ? carousel.total : carousel.visible;
            carousel.currentIndex = carousel.startSlide > carousel.total - 1 ? carousel.total - 1 : params.startSlide;
            try {
                if (carousel.visible !== 2) {
                    carousel.visible = (carousel.visible % 2) ? carousel.visible : carousel.visible - 1;
                }
            }
            catch (error) {
                console.log(error);
            }
            return carousel;
        }, function (err) { return carousel; });
    };
    NgxCarousel3dService.prototype.isInitiated = function () {
        return (this.state !== this.states.PENDING);
    };
    NgxCarousel3dService.prototype.isRejected = function () {
        return (this.state === this.states.REJECTED);
    };
    NgxCarousel3dService.prototype.isResolved = function () {
        return (this.state === this.states.RESOLVED);
    };
    NgxCarousel3dService.prototype.load = function () {
        if (this.isInitiated()) {
            return this;
        }
        this.state = this.states.LOADING;
        if (!this.sourceProp) {
            this.deferred.resolve(this);
        }
        else {
            for (var i = 0; i < this.total; i++) {
                this.loadImageLocation(this.slides[i]);
            }
        }
        return this;
    };
    NgxCarousel3dService.prototype.handleImageError = function () {
        this.errorCount++;
        if (this.isRejected()) {
            return;
        }
        this.state = this.states.REJECTED;
        this.deferred.reject(this);
    };
    NgxCarousel3dService.prototype.handleImageLoad = function (imageLocation) {
        this.loadCount++;
        if (this.isRejected()) {
            return;
        }
        this.percent.next(new Object({ percent: Math.ceil(this.loadCount / this.total * 100) }));
        this.imageLocation.next(imageLocation);
        if (this.loadCount === this.total) {
            this.state = this.states.RESOLVED;
            this.deferred.resolve(this);
        }
    };
    NgxCarousel3dService.prototype.loadImageLocation = function (imageLocation) {
        var carousel = this;
        var image = new Image();
        image.onload = function (event) {
            carousel.handleImageLoad(event.target);
            image = event = null;
        };
        image.onerror = function (event) {
            carousel.handleImageError();
            image = event = null;
        };
        image.src = imageLocation[this.sourceProp];
    };
    NgxCarousel3dService.prototype.getTotalNumber = function () {
        return this.total;
    };
    NgxCarousel3dService.prototype.setStartSlide = function (index) {
        this.startSlide = (index < 0 || index > this.total) ? 0 : index;
    };
    NgxCarousel3dService.prototype.setCurrentIndex = function (index) {
        return this.currentIndex = index;
    };
    NgxCarousel3dService.prototype.getOuterWidth = function () {
        return parseInt(this.width + this.border, 10);
    };
    NgxCarousel3dService.prototype.getOuterHeight = function () {
        return parseInt(this.height + this.border, 10);
    };
    NgxCarousel3dService.prototype.setLock = function (value) {
        return this.lock = value;
    };
    NgxCarousel3dService.prototype.getLock = function () {
        return this.lock;
    };
    NgxCarousel3dService.prototype.getSlides = function () {
        return this.slides;
    };
    NgxCarousel3dService.prototype.setSlides = function () {
        var num = Number(Math.floor(this.visible / 2) + 1);
        var dir = 'ltr';
        this.leftSlides = [];
        this.rightSlides = [];
        for (var m = 1; m < num; m++) {
            var eq1 = (this.dir === dir) ? (this.currentIndex + m) % (this.total) : (this.currentIndex - m) % (this.total), eq2 = (this.dir === dir) ? (this.currentIndex - m) % (this.total) : (this.currentIndex + m) % (this.total);
            this.leftSlides.push(eq1);
            this.rightSlides.push(eq2);
        }
        var rightOut = this.leftOutSlide = (this.currentIndex - num), leftOut = this.rightOutSlide = ((this.total - this.currentIndex - num) <= 0) ?
            (-(this.total - this.currentIndex - num)) : (this.currentIndex + num);
        if (this.dir === dir) {
            this.leftOutSlide = rightOut;
            this.rightOutSlide = leftOut;
        }
        return this.slides;
    };
    NgxCarousel3dService.prototype.getVisibleSlidesIndex = function () {
        var _this = this;
        var visibleSlidesObj = {};
        var value = this.currentIndex;
        var key = Math.floor(this.total / 2);
        var count = 0;
        while (count !== this.total) {
            visibleSlidesObj[key % this.total] = value;
            key = ++key % this.total;
            value = ++value % this.total;
            count++;
        }
        var visibleSlidesArr = Object.keys(visibleSlidesObj).map(function (k) { return visibleSlidesObj[k]; });
        if (this.dir === 'ltr') {
            visibleSlidesArr = visibleSlidesArr.reverse();
        }
        var indexInTab = visibleSlidesArr.findIndex(function (val) { return val === _this.currentIndex; });
        return visibleSlidesArr.splice(indexInTab - Math.floor(this.visible / 2), this.visible);
    };
    NgxCarousel3dService.prototype.isLastSlide = function () {
        return this.currentIndex === this.total - 1;
    };
    NgxCarousel3dService.prototype.isFirstSlide = function () {
        return this.currentIndex === 0;
    };
    NgxCarousel3dService.prototype.getSourceProp = function () {
        return this.sourceProp;
    };
    NgxCarousel3dService.prototype.getPercent = function () {
        return this.percent.asObservable();
    };
    NgxCarousel3dService.prototype.getImageLocation = function () {
        return this.imageLocation.asObservable();
    };
    return NgxCarousel3dService;
}());
var jquery = jqueryProxy__default__default__default || jqueryProxy__default__default;
var NgxCarousel3dComponent = /** @class */ (function () {
    function NgxCarousel3dComponent() {
        this.isLoading = true;
        this.isSuccessful = false;
        this.isRendered = false;
        this.percentLoaded = 0;
        this.autoRotation = null;
        this.$wrapper = null;
        this.$slides = [];
    }
    NgxCarousel3dComponent.prototype.ngOnDestroy = function () {
        this.percentSubscription.unsubscribe();
    };
    NgxCarousel3dComponent.prototype.ngOnChanges = function (changes) {
        if (changes['slides'] && changes['options']) {
            this.buildCarousel(changes["slides"].currentValue, changes["options"].currentValue);
        }
        else if (changes['slides']) {
            this.buildCarousel(changes["slides"].currentValue, this.options);
        }
    };
    NgxCarousel3dComponent.prototype.ngOnInit = function () {
        this.buildCarousel(this.slides, this.options);
    };
    NgxCarousel3dComponent.prototype.buildCarousel = function (slides, options) {
        var _this = this;
        this.$carouselService = new NgxCarousel3dService(this.slides, this.options);
        this.percentSubscription = this.$carouselService.getPercent().subscribe(function (sub) { _this.percentLoaded = sub.percent; });
        this.autoRotationLocked = false;
        return this.$carouselService
            .build(this.slides || [], this.options || {})
            .then(function (carousel) {
            _this.carousel3d = carousel;
            _this.slides = _this.carousel3d.slides;
            _this.controls = _this.carousel3d.controls;
            _this.isLoading = false;
            _this.isSuccessful = true;
            var outerHeight = _this.carousel3d.getOuterHeight(), outerWidth = _this.carousel3d.getOuterWidth();
            jquery('div.carousel-3d-container').css({ 'height': outerHeight + 'px' });
            _this.$wrapper = jquery('div.carousel-3d');
            _this.$wrapper.css({ 'width': outerWidth + 'px', 'height': outerHeight + 'px' });
            _this.$slides = _this.$wrapper.children().toArray();
            new Promise(function (resolve, reject) {
                resolve(_this.render(true, _this.carousel3d.animationSpeed));
            }).then(function (res) {
                _this.animationEnd();
            });
        }, function handleReject(carousel) {
            if (this) {
                this.carousel3d = carousel;
                this.isLoading = false;
                this.isSuccessful = false;
            }
            jquery().css({ 'height': carousel.getOuterHeight() + 'px' });
        }, function handleNotify(event) {
            this.percentLoaded = event.percent;
        });
    };
    NgxCarousel3dComponent.prototype.render = function (animate, speedTime) {
        var _this = this;
        this.carousel3d.setSlides();
        var outerHeight = this.carousel3d.getOuterHeight(), outerWidth = this.carousel3d.getOuterWidth(), slideTop = (this.carousel3d.topSpace === 'auto') ? 0 : ((outerHeight / 2) - (outerHeight / 2)), slideLeft = ((this.carousel3d.width / 2) - (outerWidth / 2)), speed = (speedTime) ? (speedTime / 1000) : (this.carousel3d.animationSpeed / 1000);
        var zIndex = 999;
        this.carousel3d.slides.forEach(function (slide, index) {
            var css = {
                position: 'absolute',
                opacity: 0,
                visibility: 'hidden',
                overflow: 'hidden',
                top: slideTop + 'px',
                'border-width': _this.carousel3d.border + 'px',
                width: outerWidth + 'px',
                height: outerHeight + 'px'
            };
            if (animate) {
                var css2 = Object.assign({}, css, { '-webkit-transition': 'all ' + speed + 's ', '-moz-transition': 'all ' + speed + 's ', '-o-transition': 'all ' + speed + 's ', '-ms-transition': 'all ' + speed + 's ', 'transition': 'all ' + speed + 's ' });
                _this.getSlide(index).css(css2);
            }
            _this.getSlide(index).css(css);
        });
        this.getSlide(this.carousel3d.currentIndex)
            .addClass('current')
            .css({
            zIndex: zIndex,
            opacity: 1,
            visibility: 'visible',
            '-webkit-transform': 'none',
            '-moz-transform': 'none',
            '-o-transform': 'none',
            '-ms-transform': 'none',
            'transform': 'none',
            left: slideLeft + 'px',
            top: slideTop + 'px',
            width: outerWidth + 'px',
            height: outerHeight + 'px'
        });
        this.carousel3d.rightSlides.forEach(function (slide, index) {
            var css = _this.setCss(index, zIndex, true);
            zIndex -= index + 1;
            _this.getSlide(slide)
                .css(css)
                .css({
                opacity: 1,
                visibility: 'visible',
                zIndex: zIndex
            });
        });
        this.carousel3d.leftSlides.forEach(function (slide, index) {
            var css = _this.setCss(index, zIndex, false);
            zIndex -= index + 1;
            _this.getSlide(slide)
                .css(css)
                .css({
                opacity: 1,
                visibility: 'visible',
                zIndex: zIndex
            });
        });
        if (this.carousel3d.total > this.carousel3d.visible) {
            var rCSS = this.setCss(this.carousel3d.rightSlides.length - 1, this.carousel3d.rightSlides.length - 1, true), lCSS = this.setCss(this.carousel3d.leftSlides.length - 1, this.carousel3d.leftSlides.length - 1, true);
            this.getSlide(this.carousel3d.rightOutSlide).css(rCSS);
            this.getSlide(this.carousel3d.leftOutSlide).css(lCSS);
        }
        this.isRendered = true;
        return true;
    };
    NgxCarousel3dComponent.prototype.setCss = function (i, zIndex, positive) {
        var leftRemain = (this.carousel3d.space === 'auto') ? ((i + 1) * (this.carousel3d.width / 1.5)) :
            ((i + 1) * (this.carousel3d.space)), transform = (positive) ?
            'translateX(' + (leftRemain) + 'px) translateZ(-' +
                (this.carousel3d.inverseScaling + ((i + 1) * 100)) + 'px) rotateY(-' +
                this.carousel3d.perspective + 'deg)' :
            'translateX(-' + (leftRemain) + 'px) translateZ(-' +
                (this.carousel3d.inverseScaling + ((i + 1) * 100)) + 'px) rotateY(' +
                this.carousel3d.perspective + 'deg)', left = '0%', top = (this.carousel3d.topSpace === 'auto') ? 'none' : ((i + 1) * (this.carousel3d.space)), width = 'none', height = 'none', overflow = 'visible';
        return {
            '-webkit-transform': transform,
            '-moz-transform': transform,
            '-o-transform': transform,
            '-ms-transform': transform,
            'transform': transform,
            left: left,
            top: top,
            width: width,
            height: height,
            zIndex: zIndex,
            overflow: overflow
        };
    };
    NgxCarousel3dComponent.prototype.goSlide = function (index) {
        var _this = this;
        var keepChanging = false;
        if (typeof this.onBeforeChange === 'function') {
            keepChanging = this.onBeforeChange({
                index: this.carousel3d.currentIndex
            });
            if (keepChanging === false) {
                return;
            }
        }
        this.carousel3d.setCurrentIndex((index < 0 || index > this.carousel3d.total - 1) ? 0 : index);
        if (this.carousel3d.isLastSlide()) {
            if (typeof this.onLastSlide === 'function') {
                this.onLastSlide({
                    index: this.carousel3d.currentIndex
                });
            }
        }
        this.$slides.forEach(function (slide, ind) {
            jquery().removeClass('current');
        });
        this.carousel3d.setLock(true);
        new Promise(function (resolve, reject) {
            resolve(_this.render(true, _this.carousel3d.animationSpeed));
        }).then(function (res) {
            _this.animationEnd();
        });
    };
    NgxCarousel3dComponent.prototype.goNext = function () {
        if (this.carousel3d.getLock() || (!this.carousel3d.loop && this.carousel3d.isLastSlide())) {
            return false;
        }
        if (this.carousel3d.isLastSlide()) {
            this.goSlide(0);
        }
        else {
            this.goSlide(this.carousel3d.currentIndex + 1);
        }
        return true;
    };
    NgxCarousel3dComponent.prototype.goPrev = function () {
        if (this.carousel3d.getLock() || (!this.carousel3d.loop && this.carousel3d.isFirstSlide())) {
            return false;
        }
        if (this.carousel3d.isFirstSlide()) {
            this.goSlide(this.carousel3d.total - 1);
        }
        else {
            this.goSlide(this.carousel3d.currentIndex - 1);
        }
        return true;
    };
    NgxCarousel3dComponent.prototype.goFar = function (index) {
        var _this = this;
        if (index === this.carousel3d.currentIndex) {
            return;
        }
        var visibleSlides = this.carousel3d.getVisibleSlidesIndex();
        var indexInVisibleSlides = visibleSlides.findIndex(function (val) { return val === index; });
        if (indexInVisibleSlides < 0) {
            return;
        }
        var currentIndexInVisibleSlides = visibleSlides.findIndex(function (val) { return val === _this.carousel3d.currentIndex; });
        if (currentIndexInVisibleSlides < 0) {
            return;
        }
        var diff = indexInVisibleSlides - currentIndexInVisibleSlides;
        if (this.carousel3d.dir === 'ltr') {
            diff = -diff;
        }
        var diff2 = Math.abs(diff);
        var timeBuff = 0;
        var timeout = this.carousel3d.animationSpeed / diff2;
        for (var i = 0; i < diff2; i++, timeBuff += timeout) {
            setTimeout(function () {
                if (diff >= 0) {
                    _this.goNext();
                }
                else {
                    _this.goPrev();
                }
            }, timeBuff);
        }
    };
    NgxCarousel3dComponent.prototype.animationEnd = function () {
        this.carousel3d.setLock(false);
        if (typeof this.onSlideChange === 'function') {
            this.onSlideChange({
                index: this.carousel3d.currentIndex
            });
        }
        if (!this.$timer) {
            this.subscribe();
        }
    };
    NgxCarousel3dComponent.prototype.getSlide = function (index) {
        return (index >= 0) ? jquery(this.$slides[index]) : jquery(this.$slides[this.carousel3d.total + index]);
    };
    NgxCarousel3dComponent.prototype.slideClicked = function (index) {
        if (this.$timer) {
            this.$timer.unsubscribe();
        }
        this.$timer = null;
        if (this.carousel3d.currentIndex !== index) {
            if (!this.carousel3d.clicking) {
                return false;
            }
            else {
                this.goFar(index);
            }
        }
        else {
            if (typeof this.onSelectedClick === 'function') {
                this.onSelectedClick({
                    index: this.carousel3d.currentIndex
                });
            }
        }
    };
    NgxCarousel3dComponent.prototype.subscribe = function () {
        var _this = this;
        this.$timer = Observable.Observable.timer(this.carousel3d.autoRotationSpeed, this.carousel3d.autoRotationSpeed).subscribe(function () {
            if (!_this.carousel3d.autoRotationLocked) {
                if (_this.options['dir'] === 'ltr') {
                    _this.goNext();
                }
                else {
                    _this.goPrev();
                }
            }
        });
    };
    NgxCarousel3dComponent.prototype.setSlideLock = function (value) {
        this.$carouselService.setLock(value);
        this.autoRotationLocked = value;
    };
    return NgxCarousel3dComponent;
}());
NgxCarousel3dComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ngx-carousel-3d',
                template: "<div class=\"carousel-3d-container\">\n  <div class=\"carousel-3d-loader\" [hidden]=\"!isLoading\">\n      <div class=\"carousel-3d-loader-circle\"></div>\n      <div class=\"carousel-3d-loader-percentage\">{{ percentLoaded }}</div>\n  </div>\n  <div  [hidden]=\"isLoading\" [ngSwitch]=\"isSuccessful\" >\n      <div #carousel3D class=\"carousel-3d\" [hidden]=\"!isRendered && !isSuccessful\">\n          <ng-content></ng-content>\n      </div>\n      <p  [hidden]=\"isSuccessful\"  class=\"carousel-3d-loader-error\">There was a problem during load</p>\n      <div *ngIf=\"controls\" class=\"carousel-3d-controls\">\n          <div class=\"carousel-3d-next arrow-left\" (click)=\"options.dir === 'ltr' ? goNext() : goPrev()\"></div>\n          <div class=\"carousel-3d-prev arrow-right\" (click)=\"options.dir === 'ltr' ? goPrev() : goNext()\"></div>\n      </div>\n  </div>\n</div>",
                styles: [".carousel-3d-container{\n  width:100%;\n  overflow:hidden;\n  position:relative;\n  z-index:0;\n  margin:20px auto; }\n.carousel-3d{\n  position:relative;\n  margin:0 auto;\n  -webkit-transform-style:preserve-3d;\n  transform-style:preserve-3d;\n  -webkit-perspective:1000px;\n  -o-perspective:1000px;\n  -ms-perspective:1000px;\n  perspective:1000px; }\n.carousel-3d.ng-hide{\n  opacity:0; }\n.carousel-3d.ng-hide-remove{\n  -webkit-transition:opacity linear 1000ms;\n  transition:opacity linear 1000ms; }\n.carousel-3d.ng-hide-add{\n  -webkit-transition:opacity linear 500ms;\n  transition:opacity linear 500ms; }\n.carousel-3d-controls{\n  position:absolute;\n  top:30%;\n  left:0;\n  width:100%;\n  z-index:9099; }\n.carousel-3d-next,\n.carousel-3d-prev{\n  width:60px;\n  position:absolute !important;\n  z-index:9999; }\n.carousel-3d-next:hover,\n.carousel-3d-prev:hover{\n  cursor:pointer; }\n.carousel-3d-next{\n  left:0; }\n.carousel-3d-prev{\n  right:0; }\n.arrow-top,\n.arrow-right,\n.arrow-bottom,\n.arrow-left{\n  display:block;\n  margin:20px auto;\n  overflow:hidden;\n  position:relative; }\n.arrow-top,\n.arrow-bottom{\n  height:34px;\n  width:64px; }\n.arrow-right,\n.arrow-left{\n  height:64px;\n  width:34px; }\n.arrow-top:before,\n.arrow-right:before,\n.arrow-bottom:before,\n.arrow-left:before{\n  border:30px solid transparent;\n  content:' ';\n  display:block;\n  position:absolute;\n  z-index:2; }\n.arrow-top:before{\n  border-bottom-color:#000000;\n  left:2px;\n  bottom:0; }\n.arrow-right:before{\n  border-left-color:#000000;\n  left:0;\n  top:2px; }\n.arrow-bottom:before{\n  border-top-color:#000000;\n  left:2px;\n  top:0; }\n.arrow-left:before{\n  border-right-color:#000000;\n  right:0;\n  top:2px; }\n.arrow-top-bg:after,\n.arrow-right-bg:after,\n.arrow-bottom-bg:after,\n.arrow-left-bg:after{\n  border:32px solid transparent;\n  content:' ';\n  display:block;\n  position:absolute;\n  z-index:1; }\n.arrow-top-bg:after{\n  border-bottom-color:#000000;\n  bottom:0;\n  left:0; }\n.arrow-right-bg:after{\n  border-left-color:#000000;\n  left:0;\n  top:0; }\n.arrow-bottom-bg:after{\n  border-top-color:#000000;\n  left:0;\n  top:0; }\n.arrow-left-bg:after{\n  border-right-color:#000000;\n  right:0;\n  top:0; }\n@-webkit-keyframes uil-rolling-anim{\n  0%{\n    -webkit-transform:rotate(0deg);\n    transform:rotate(0deg); }\n  50%{\n    -webkit-transform:rotate(180deg);\n    transform:rotate(180deg); }\n  100%{\n    -webkit-transform:rotate(360deg);\n    transform:rotate(360deg); } }\n@-webkit-keyframes uil-rolling-anim{\n  0%{\n    -webkit-transform:rotate(0deg);\n    transform:rotate(0deg); }\n  50%{\n    -webkit-transform:rotate(180deg);\n    transform:rotate(180deg); }\n  100%{\n    -webkit-transform:rotate(360deg);\n    transform:rotate(360deg); } }\n@-webkit-keyframes uil-rolling-anim{\n  0%{\n    -webkit-transform:rotate(0deg);\n    transform:rotate(0deg); }\n  50%{\n    -webkit-transform:rotate(180deg);\n    transform:rotate(180deg); }\n  100%{\n    -webkit-transform:rotate(360deg);\n    transform:rotate(360deg); } }\n@keyframes uil-rolling-anim{\n  0%{\n    -webkit-transform:rotate(0deg);\n    transform:rotate(0deg); }\n  50%{\n    -webkit-transform:rotate(180deg);\n    transform:rotate(180deg); }\n  100%{\n    -webkit-transform:rotate(360deg);\n    transform:rotate(360deg); } }\n.carousel-3d-loader-circle{\n  border:16px solid #d9d9d9;\n  border-top:16px solid #209e91;\n  border-radius:50%;\n  width:120px;\n  height:120px;\n  -webkit-animation:spin 2s linear infinite;\n          animation:spin 2s linear infinite; }\n.carousel-3d-loader-circle > div{\n  width:100px;\n  height:100px;\n  position:relative;\n  -webkit-animation:uil-rolling-anim 1s linear infinite;\n  animation:uil-rolling-anim 1s linear infinite; }\n.carousel-3d-loader-circle > div div{\n  position:absolute;\n  width:100px;\n  height:50px;\n  border-radius:500px 500px 0 0;\n  border-color:#000000;\n  border-style:solid;\n  border-width:20px;\n  border-bottom-width:0; }\n.carousel-3d-loader-circle > div div:nth-of-type(2){\n  -webkit-transform:translate(0, 25px) rotate(27deg) translate(0, -25px);\n  transform:translate(0, 25px) rotate(27deg) translate(0, -25px); }\n.carousel-3d-loader{\n  position:relative;\n  left:46%; }\n.carousel-3d-loader-percentage,\n.carousel-3d-loader-error{\n  font-size:18px;\n  position:absolute;\n  top:50%;\n  text-align:center;\n  left:3.2%;\n  margin-top:-9px;\n  line-height:18px; }\n"],
                providers: []
            },] },
];
NgxCarousel3dComponent.ctorParameters = function () { return []; };
NgxCarousel3dComponent.propDecorators = {
    "options": [{ type: core.Input },],
    "slides": [{ type: core.Input },],
    "onBeforeChange": [{ type: core.Input },],
    "onLastSlide": [{ type: core.Input },],
    "onSlideChange": [{ type: core.Input },],
    "onSelectedClick": [{ type: core.Input },],
};
var NgxCarousel3dSlideComponent = /** @class */ (function () {
    function NgxCarousel3dSlideComponent() {
    }
    NgxCarousel3dSlideComponent.prototype.ngOnInit = function () {
    };
    return NgxCarousel3dSlideComponent;
}());
NgxCarousel3dSlideComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'ngx-carousel-3d-slide',
                template: "<div class=\"slide-3d\">\n      <ng-content></ng-content>\n</div>\n",
                styles: [".slide-3d{\n  border-radius:4px;\n  border-color:#000;\n  border-color:rgba(0, 0, 0, 0.4);\n  border-style:solid;\n  background-size:cover;\n  height:100%; }\n.slide-3d figure img{\n  width:100%; }\n.slide-3d figure figcaption{\n  position:absolute;\n  background:rgba(0, 0, 0, 0.5);\n  color:#fff;\n  width:100%;\n  left:0;\n  bottom:0;\n  font-weight:normal;\n  text-align:center;\n  padding:7px 10px; }\n"]
            },] },
];
NgxCarousel3dSlideComponent.ctorParameters = function () { return []; };
var NgxCarousel3dModule = /** @class */ (function () {
    function NgxCarousel3dModule() {
    }
    return NgxCarousel3dModule;
}());
NgxCarousel3dModule.decorators = [
    { type: core.NgModule, args: [{
                imports: [
                    common.CommonModule
                ],
                declarations: [
                    NgxCarousel3dComponent,
                    NgxCarousel3dSlideComponent
                ],
                exports: [
                    NgxCarousel3dComponent,
                    NgxCarousel3dSlideComponent
                ]
            },] },
];
NgxCarousel3dModule.ctorParameters = function () { return []; };

exports.NgxCarousel3dModule = NgxCarousel3dModule;
exports.ɵb = NgxCarousel3dSlideComponent;
exports.ɵa = NgxCarousel3dComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-carousel-3d.umd.js.map
