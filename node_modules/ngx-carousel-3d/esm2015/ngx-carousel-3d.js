import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { Component, Input, NgModule } from '@angular/core';
import * as jqueryProxy from 'jquery';
import jqueryProxy__default, {  } from 'jquery';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/timer';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @template T
 */
class Deferred {
    constructor() {
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
}
class NgxCarousel3dService {
    /**
     * @param {?} slides
     * @param {?} params
     */
    constructor(slides, params) {
        this.slides = slides || [];
        this.leftSlides = [];
        this.rightSlides = [];
        this.leftOutSlide = '';
        this.rightOutSlide = '';
        this.loadCount = 0;
        this.errorCount = 0;
        this.states = {
            PENDING: 1,
            LOADING: 2,
            RESOLVED: 3,
            REJECTED: 4
        };
        this.total = slides.length;
        this.currentIndex = 0;
        this.lock = false;
        this.loop = params.loop || false;
        this.clicking = params.clicking || false;
        this.sourceProp = params.sourceProp || '';
        this.visible = params.visible || 5;
        this.perspective = params.perspective || 35;
        this.animationSpeed = params.animationSpeed || 500;
        this.dir = params.dir || 'ltr';
        this.width = params.width || 360;
        this.height = params.height || 270;
        this.border = params.border || 0;
        this.space = params.space || 'auto';
        this.topSpace = params.topSpace || 'auto';
        this.controls = params.controls || false;
        this.startSlide = params.startSlide || 0;
        this.inverseScaling = params.inverseScaling || 300;
        this.autoRotationSpeed = params.autoRotationSpeed || 0;
        this.state = this.states.PENDING;
        this.deferred = new Deferred();
        this.promise = this.deferred.promise;
        this.percent = new BehaviorSubject(new Object());
        this.imageLocation = new BehaviorSubject(new Object());
    }
    /**
     * @param {?} model
     * @param {?} params
     * @return {?}
     */
    build(model, params) {
        const /** @type {?} */ carousel = this;
        return carousel.load().promise.then(function () {
            carousel.visible = (carousel.visible > carousel.total) ? carousel.total : carousel.visible;
            carousel.currentIndex = carousel.startSlide > carousel.total - 1 ? carousel.total - 1 : params.startSlide;
            try {
                if (carousel.visible !== 2) {
                    carousel.visible = (carousel.visible % 2) ? carousel.visible : carousel.visible - 1;
                }
            }
            catch (/** @type {?} */ error) {
                console.log(error);
            }
            return carousel;
        }, function (err) { return carousel; });
    }
    /**
     * @return {?}
     */
    isInitiated() {
        return (this.state !== this.states.PENDING);
    }
    /**
     * @return {?}
     */
    isRejected() {
        return (this.state === this.states.REJECTED);
    }
    /**
     * @return {?}
     */
    isResolved() {
        return (this.state === this.states.RESOLVED);
    }
    /**
     * @return {?}
     */
    load() {
        if (this.isInitiated()) {
            return this;
        }
        this.state = this.states.LOADING;
        if (!this.sourceProp) {
            this.deferred.resolve(this);
        }
        else {
            for (let /** @type {?} */ i = 0; i < this.total; i++) {
                this.loadImageLocation(this.slides[i]);
            }
        }
        return this;
    }
    /**
     * @return {?}
     */
    handleImageError() {
        this.errorCount++;
        if (this.isRejected()) {
            return;
        }
        this.state = this.states.REJECTED;
        this.deferred.reject(this);
    }
    /**
     * @param {?} imageLocation
     * @return {?}
     */
    handleImageLoad(imageLocation) {
        this.loadCount++;
        if (this.isRejected()) {
            return;
        }
        this.percent.next(new Object({ percent: Math.ceil(this.loadCount / this.total * 100) }));
        this.imageLocation.next(imageLocation);
        if (this.loadCount === this.total) {
            this.state = this.states.RESOLVED;
            this.deferred.resolve(this);
        }
    }
    /**
     * @param {?} imageLocation
     * @return {?}
     */
    loadImageLocation(imageLocation) {
        const /** @type {?} */ carousel = this;
        let /** @type {?} */ image = new Image();
        image.onload = function (event) {
            carousel.handleImageLoad(event.target);
            image = event = null;
        };
        image.onerror = function (event) {
            carousel.handleImageError();
            image = event = null;
        };
        image.src = imageLocation[this.sourceProp];
    }
    /**
     * @return {?}
     */
    getTotalNumber() {
        return this.total;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setStartSlide(index) {
        this.startSlide = (index < 0 || index > this.total) ? 0 : index;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setCurrentIndex(index) {
        return this.currentIndex = index;
    }
    /**
     * @return {?}
     */
    getOuterWidth() {
        return parseInt(this.width + this.border, 10);
    }
    /**
     * @return {?}
     */
    getOuterHeight() {
        return parseInt(this.height + this.border, 10);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setLock(value) {
        return this.lock = value;
    }
    /**
     * @return {?}
     */
    getLock() {
        return this.lock;
    }
    /**
     * @return {?}
     */
    getSlides() {
        return this.slides;
    }
    /**
     * @return {?}
     */
    setSlides() {
        const /** @type {?} */ num = Number(Math.floor(this.visible / 2) + 1);
        const /** @type {?} */ dir = 'ltr';
        this.leftSlides = [];
        this.rightSlides = [];
        for (let /** @type {?} */ m = 1; m < num; m++) {
            const /** @type {?} */ eq1 = (this.dir === dir) ? (this.currentIndex + m) % (this.total) : (this.currentIndex - m) % (this.total), /** @type {?} */
            eq2 = (this.dir === dir) ? (this.currentIndex - m) % (this.total) : (this.currentIndex + m) % (this.total);
            this.leftSlides.push(eq1);
            this.rightSlides.push(eq2);
        }
        const /** @type {?} */ rightOut = this.leftOutSlide = (this.currentIndex - num), /** @type {?} */
        leftOut = this.rightOutSlide = ((this.total - this.currentIndex - num) <= 0) ?
            (-(this.total - this.currentIndex - num)) : (this.currentIndex + num);
        if (this.dir === dir) {
            this.leftOutSlide = rightOut;
            this.rightOutSlide = leftOut;
        }
        return this.slides;
    }
    /**
     * @return {?}
     */
    getVisibleSlidesIndex() {
        // Build an object containing each slide number in their apparition order (even the hidden ones)
        const /** @type {?} */ visibleSlidesObj = {};
        let /** @type {?} */ value = this.currentIndex;
        let /** @type {?} */ key = Math.floor(this.total / 2);
        let /** @type {?} */ count = 0;
        while (count !== this.total) {
            visibleSlidesObj[key % this.total] = value;
            key = ++key % this.total;
            value = ++value % this.total;
            count++;
        }
        // The object looks like an array so the values are sorted
        let /** @type {?} */ visibleSlidesArr = Object.keys(visibleSlidesObj).map(k => visibleSlidesObj[k]);
        // Takes care of the direction
        if (this.dir === 'ltr') {
            visibleSlidesArr = visibleSlidesArr.reverse();
        }
        // Extracts only the visible slides
        const /** @type {?} */ indexInTab = visibleSlidesArr.findIndex(val => val === this.currentIndex);
        return visibleSlidesArr.splice(indexInTab - Math.floor(this.visible / 2), this.visible);
    }
    /**
     * @return {?}
     */
    isLastSlide() {
        return this.currentIndex === this.total - 1;
    }
    /**
     * @return {?}
     */
    isFirstSlide() {
        return this.currentIndex === 0;
    }
    /**
     * @return {?}
     */
    getSourceProp() {
        return this.sourceProp;
    }
    /**
     * @return {?}
     */
    getPercent() {
        return this.percent.asObservable();
    }
    /**
     * @return {?}
     */
    getImageLocation() {
        return this.imageLocation.asObservable();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const jquery = jqueryProxy__default || jqueryProxy;
class NgxCarousel3dComponent {
    constructor() {
        this.isLoading = true;
        this.isSuccessful = false;
        this.isRendered = false;
        this.percentLoaded = 0;
        this.autoRotation = null;
        this.$wrapper = null;
        this.$slides = [];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // unsubscribe to ensure no memory leaks
        this.percentSubscription.unsubscribe();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['slides'] && changes['options']) {
            this.buildCarousel(changes["slides"].currentValue, changes["options"].currentValue);
        }
        else if (changes['slides']) {
            this.buildCarousel(changes["slides"].currentValue, this.options);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.buildCarousel(this.slides, this.options);
    }
    /**
     * @param {?} slides
     * @param {?} options
     * @return {?}
     */
    buildCarousel(slides, options) {
        this.$carouselService = new NgxCarousel3dService(this.slides, this.options);
        this.percentSubscription = this.$carouselService.getPercent().subscribe(sub => { this.percentLoaded = sub.percent; });
        this.autoRotationLocked = false;
        return this.$carouselService
            .build(this.slides || [], this.options || {})
            .then((carousel) => {
            this.carousel3d = carousel;
            this.slides = this.carousel3d.slides;
            this.controls = this.carousel3d.controls;
            this.isLoading = false;
            this.isSuccessful = true;
            const /** @type {?} */ outerHeight = this.carousel3d.getOuterHeight(), /** @type {?} */
            outerWidth = this.carousel3d.getOuterWidth();
            jquery('div.carousel-3d-container').css({ 'height': outerHeight + 'px' });
            this.$wrapper = jquery('div.carousel-3d');
            this.$wrapper.css({ 'width': outerWidth + 'px', 'height': outerHeight + 'px' });
            this.$slides = this.$wrapper.children().toArray();
            new Promise((resolve, reject) => {
                resolve(this.render(true, this.carousel3d.animationSpeed));
            }).then((res) => {
                this.animationEnd();
            });
        },
        // == Preloaded images reject  handler
        function handleReject(carousel) {
            if (this) {
                this.carousel3d = carousel;
                this.isLoading = false;
                this.isSuccessful = false;
            }
            jquery().css({ 'height': carousel.getOuterHeight() + 'px' });
        },
        // == Preloaded images notify handler which is executed multiple times during preload
        function handleNotify(event) {
            this.percentLoaded = event.percent;
        });
    }
    /**
     * @param {?} animate
     * @param {?} speedTime
     * @return {?}
     */
    render(animate, speedTime) {
        this.carousel3d.setSlides();
        const /** @type {?} */ outerHeight = this.carousel3d.getOuterHeight(), /** @type {?} */
        outerWidth = this.carousel3d.getOuterWidth(), /** @type {?} */
        slideTop = (this.carousel3d.topSpace === 'auto') ? 0 : ((outerHeight / 2) - (outerHeight / 2)), /** @type {?} */
        slideLeft = ((this.carousel3d.width / 2) - (outerWidth / 2)), /** @type {?} */
        speed = (speedTime) ? (speedTime / 1000) : (this.carousel3d.animationSpeed / 1000);
        let /** @type {?} */ zIndex = 999;
        // == Set other slides styles
        this.carousel3d.slides.forEach((slide, index) => {
            const /** @type {?} */ css = {
                position: 'absolute',
                opacity: 0,
                visibility: 'hidden',
                overflow: 'hidden',
                top: slideTop + 'px',
                'border-width': this.carousel3d.border + 'px',
                width: outerWidth + 'px',
                height: outerHeight + 'px'
            };
            if (animate) {
                const /** @type {?} */ css2 = Object.assign({}, css, { '-webkit-transition': 'all ' + speed + 's ', '-moz-transition': 'all ' + speed + 's ', '-o-transition': 'all ' + speed + 's ', '-ms-transition': 'all ' + speed + 's ', 'transition': 'all ' + speed + 's ' });
                this.getSlide(index).css(css2);
            }
            this.getSlide(index).css(css);
        });
        // == Set first slide styles
        this.getSlide(this.carousel3d.currentIndex)
            .addClass('current')
            .css({
            zIndex: zIndex,
            opacity: 1,
            visibility: 'visible',
            '-webkit-transform': 'none',
            '-moz-transform': 'none',
            '-o-transform': 'none',
            '-ms-transform': 'none',
            'transform': 'none',
            left: slideLeft + 'px',
            top: slideTop + 'px',
            width: outerWidth + 'px',
            height: outerHeight + 'px'
        });
        this.carousel3d.rightSlides.forEach((slide, index) => {
            const /** @type {?} */ css = this.setCss(index, zIndex, true);
            zIndex -= index + 1;
            this.getSlide(slide)
                .css(css)
                .css({
                opacity: 1,
                visibility: 'visible',
                zIndex: zIndex
            });
        });
        this.carousel3d.leftSlides.forEach((slide, index) => {
            const /** @type {?} */ css = this.setCss(index, zIndex, false);
            zIndex -= index + 1;
            this.getSlide(slide)
                .css(css)
                .css({
                opacity: 1,
                visibility: 'visible',
                zIndex: zIndex
            });
        });
        if (this.carousel3d.total > this.carousel3d.visible) {
            const /** @type {?} */ rCSS = this.setCss(this.carousel3d.rightSlides.length - 1, this.carousel3d.rightSlides.length - 1, true), /** @type {?} */
            lCSS = this.setCss(this.carousel3d.leftSlides.length - 1, this.carousel3d.leftSlides.length - 1, true);
            this.getSlide(this.carousel3d.rightOutSlide).css(rCSS);
            this.getSlide(this.carousel3d.leftOutSlide).css(lCSS);
        }
        this.isRendered = true;
        return true;
    }
    /**
     * @param {?} i
     * @param {?} zIndex
     * @param {?} positive
     * @return {?}
     */
    setCss(i, zIndex, positive) {
        const /** @type {?} */ leftRemain = (this.carousel3d.space === 'auto') ? ((i + 1) * (this.carousel3d.width / 1.5)) :
            ((i + 1) * (this.carousel3d.space)), /** @type {?} */
        transform = (positive) ?
            'translateX(' + (leftRemain) + 'px) translateZ(-' +
                (this.carousel3d.inverseScaling + ((i + 1) * 100)) + 'px) rotateY(-' +
                this.carousel3d.perspective + 'deg)' :
            'translateX(-' + (leftRemain) + 'px) translateZ(-' +
                (this.carousel3d.inverseScaling + ((i + 1) * 100)) + 'px) rotateY(' +
                this.carousel3d.perspective + 'deg)', /** @type {?} */
        left = '0%', /** @type {?} */
        top = (this.carousel3d.topSpace === 'auto') ? 'none' : ((i + 1) * (this.carousel3d.space)), /** @type {?} */
        width = 'none', /** @type {?} */
        height = 'none', /** @type {?} */
        overflow = 'visible';
        return {
            '-webkit-transform': transform,
            '-moz-transform': transform,
            '-o-transform': transform,
            '-ms-transform': transform,
            'transform': transform,
            left: left,
            top: top,
            width: width,
            height: height,
            zIndex: zIndex,
            overflow: overflow
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    goSlide(index) {
        let /** @type {?} */ keepChanging = false;
        if (typeof this.onBeforeChange === 'function') {
            keepChanging = this.onBeforeChange({
                index: this.carousel3d.currentIndex
            });
            if (keepChanging === false) {
                return;
            }
        }
        this.carousel3d.setCurrentIndex((index < 0 || index > this.carousel3d.total - 1) ? 0 : index);
        if (this.carousel3d.isLastSlide()) {
            if (typeof this.onLastSlide === 'function') {
                this.onLastSlide({
                    index: this.carousel3d.currentIndex
                });
            }
        }
        this.$slides.forEach((slide, ind) => {
            jquery().removeClass('current');
        });
        this.carousel3d.setLock(true);
        new Promise((resolve, reject) => {
            resolve(this.render(true, this.carousel3d.animationSpeed));
        }).then((res) => {
            this.animationEnd();
        });
    }
    /**
     * @return {?}
     */
    goNext() {
        if (this.carousel3d.getLock() || (!this.carousel3d.loop && this.carousel3d.isLastSlide())) {
            return false;
        }
        if (this.carousel3d.isLastSlide()) {
            this.goSlide(0);
        }
        else {
            this.goSlide(this.carousel3d.currentIndex + 1);
        }
        return true;
    }
    /**
     * @return {?}
     */
    goPrev() {
        if (this.carousel3d.getLock() || (!this.carousel3d.loop && this.carousel3d.isFirstSlide())) {
            return false;
        }
        if (this.carousel3d.isFirstSlide()) {
            this.goSlide(this.carousel3d.total - 1);
        }
        else {
            this.goSlide(this.carousel3d.currentIndex - 1);
        }
        return true;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    goFar(index) {
        if (index === this.carousel3d.currentIndex) {
            return;
        }
        const /** @type {?} */ visibleSlides = this.carousel3d.getVisibleSlidesIndex();
        const /** @type {?} */ indexInVisibleSlides = visibleSlides.findIndex(val => val === index);
        if (indexInVisibleSlides < 0) {
            return;
        }
        const /** @type {?} */ currentIndexInVisibleSlides = visibleSlides.findIndex(val => val === this.carousel3d.currentIndex);
        if (currentIndexInVisibleSlides < 0) {
            return;
        }
        let /** @type {?} */ diff = indexInVisibleSlides - currentIndexInVisibleSlides;
        if (this.carousel3d.dir === 'ltr') {
            diff = -diff;
        }
        const /** @type {?} */ diff2 = Math.abs(diff);
        let /** @type {?} */ timeBuff = 0;
        const /** @type {?} */ timeout = this.carousel3d.animationSpeed / diff2;
        for (let /** @type {?} */ i = 0; i < diff2; i++, timeBuff += timeout) {
            setTimeout(() => {
                if (diff >= 0) {
                    this.goNext();
                }
                else {
                    this.goPrev();
                }
            }, timeBuff);
        }
    }
    /**
     * @return {?}
     */
    animationEnd() {
        this.carousel3d.setLock(false);
        if (typeof this.onSlideChange === 'function') {
            this.onSlideChange({
                index: this.carousel3d.currentIndex
            });
        }
        if (!this.$timer) {
            this.subscribe();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getSlide(index) {
        return (index >= 0) ? jquery(this.$slides[index]) : jquery(this.$slides[this.carousel3d.total + index]);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    slideClicked(index) {
        if (this.$timer) {
            this.$timer.unsubscribe();
        }
        this.$timer = null;
        if (this.carousel3d.currentIndex !== index) {
            if (!this.carousel3d.clicking) {
                return false;
            }
            else {
                this.goFar(index);
            }
        }
        else {
            if (typeof this.onSelectedClick === 'function') {
                this.onSelectedClick({
                    index: this.carousel3d.currentIndex
                });
            }
        }
    }
    /**
     * @return {?}
     */
    subscribe() {
        this.$timer = Observable.timer(this.carousel3d.autoRotationSpeed, this.carousel3d.autoRotationSpeed).subscribe(() => {
            if (!this.carousel3d.autoRotationLocked) {
                if (this.options['dir'] === 'ltr') {
                    this.goNext();
                }
                else {
                    this.goPrev();
                }
            }
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setSlideLock(value) {
        this.$carouselService.setLock(value);
        this.autoRotationLocked = value;
    }
}
NgxCarousel3dComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-carousel-3d',
                template: `<div class="carousel-3d-container">
  <div class="carousel-3d-loader" [hidden]="!isLoading">
      <div class="carousel-3d-loader-circle"></div>
      <div class="carousel-3d-loader-percentage">{{ percentLoaded }}</div>
  </div>
  <div  [hidden]="isLoading" [ngSwitch]="isSuccessful" >
      <div #carousel3D class="carousel-3d" [hidden]="!isRendered && !isSuccessful">
          <ng-content></ng-content>
      </div>
      <p  [hidden]="isSuccessful"  class="carousel-3d-loader-error">There was a problem during load</p>
      <div *ngIf="controls" class="carousel-3d-controls">
          <div class="carousel-3d-next arrow-left" (click)="options.dir === 'ltr' ? goNext() : goPrev()"></div>
          <div class="carousel-3d-prev arrow-right" (click)="options.dir === 'ltr' ? goPrev() : goNext()"></div>
      </div>
  </div>
</div>`,
                styles: [`.carousel-3d-container{
  width:100%;
  overflow:hidden;
  position:relative;
  z-index:0;
  margin:20px auto; }
.carousel-3d{
  position:relative;
  margin:0 auto;
  -webkit-transform-style:preserve-3d;
  transform-style:preserve-3d;
  -webkit-perspective:1000px;
  -o-perspective:1000px;
  -ms-perspective:1000px;
  perspective:1000px; }
.carousel-3d.ng-hide{
  opacity:0; }
.carousel-3d.ng-hide-remove{
  -webkit-transition:opacity linear 1000ms;
  transition:opacity linear 1000ms; }
.carousel-3d.ng-hide-add{
  -webkit-transition:opacity linear 500ms;
  transition:opacity linear 500ms; }
.carousel-3d-controls{
  position:absolute;
  top:30%;
  left:0;
  width:100%;
  z-index:9099; }
.carousel-3d-next,
.carousel-3d-prev{
  width:60px;
  position:absolute !important;
  z-index:9999; }
.carousel-3d-next:hover,
.carousel-3d-prev:hover{
  cursor:pointer; }
.carousel-3d-next{
  left:0; }
.carousel-3d-prev{
  right:0; }
.arrow-top,
.arrow-right,
.arrow-bottom,
.arrow-left{
  display:block;
  margin:20px auto;
  overflow:hidden;
  position:relative; }
.arrow-top,
.arrow-bottom{
  height:34px;
  width:64px; }
.arrow-right,
.arrow-left{
  height:64px;
  width:34px; }
.arrow-top:before,
.arrow-right:before,
.arrow-bottom:before,
.arrow-left:before{
  border:30px solid transparent;
  content:' ';
  display:block;
  position:absolute;
  z-index:2; }
.arrow-top:before{
  border-bottom-color:#000000;
  left:2px;
  bottom:0; }
.arrow-right:before{
  border-left-color:#000000;
  left:0;
  top:2px; }
.arrow-bottom:before{
  border-top-color:#000000;
  left:2px;
  top:0; }
.arrow-left:before{
  border-right-color:#000000;
  right:0;
  top:2px; }
.arrow-top-bg:after,
.arrow-right-bg:after,
.arrow-bottom-bg:after,
.arrow-left-bg:after{
  border:32px solid transparent;
  content:' ';
  display:block;
  position:absolute;
  z-index:1; }
.arrow-top-bg:after{
  border-bottom-color:#000000;
  bottom:0;
  left:0; }
.arrow-right-bg:after{
  border-left-color:#000000;
  left:0;
  top:0; }
.arrow-bottom-bg:after{
  border-top-color:#000000;
  left:0;
  top:0; }
.arrow-left-bg:after{
  border-right-color:#000000;
  right:0;
  top:0; }
@-webkit-keyframes uil-rolling-anim{
  0%{
    -webkit-transform:rotate(0deg);
    transform:rotate(0deg); }
  50%{
    -webkit-transform:rotate(180deg);
    transform:rotate(180deg); }
  100%{
    -webkit-transform:rotate(360deg);
    transform:rotate(360deg); } }
@-webkit-keyframes uil-rolling-anim{
  0%{
    -webkit-transform:rotate(0deg);
    transform:rotate(0deg); }
  50%{
    -webkit-transform:rotate(180deg);
    transform:rotate(180deg); }
  100%{
    -webkit-transform:rotate(360deg);
    transform:rotate(360deg); } }
@-webkit-keyframes uil-rolling-anim{
  0%{
    -webkit-transform:rotate(0deg);
    transform:rotate(0deg); }
  50%{
    -webkit-transform:rotate(180deg);
    transform:rotate(180deg); }
  100%{
    -webkit-transform:rotate(360deg);
    transform:rotate(360deg); } }
@keyframes uil-rolling-anim{
  0%{
    -webkit-transform:rotate(0deg);
    transform:rotate(0deg); }
  50%{
    -webkit-transform:rotate(180deg);
    transform:rotate(180deg); }
  100%{
    -webkit-transform:rotate(360deg);
    transform:rotate(360deg); } }
.carousel-3d-loader-circle{
  border:16px solid #d9d9d9;
  border-top:16px solid #209e91;
  border-radius:50%;
  width:120px;
  height:120px;
  -webkit-animation:spin 2s linear infinite;
          animation:spin 2s linear infinite; }
.carousel-3d-loader-circle > div{
  width:100px;
  height:100px;
  position:relative;
  -webkit-animation:uil-rolling-anim 1s linear infinite;
  animation:uil-rolling-anim 1s linear infinite; }
.carousel-3d-loader-circle > div div{
  position:absolute;
  width:100px;
  height:50px;
  border-radius:500px 500px 0 0;
  border-color:#000000;
  border-style:solid;
  border-width:20px;
  border-bottom-width:0; }
.carousel-3d-loader-circle > div div:nth-of-type(2){
  -webkit-transform:translate(0, 25px) rotate(27deg) translate(0, -25px);
  transform:translate(0, 25px) rotate(27deg) translate(0, -25px); }
.carousel-3d-loader{
  position:relative;
  left:46%; }
.carousel-3d-loader-percentage,
.carousel-3d-loader-error{
  font-size:18px;
  position:absolute;
  top:50%;
  text-align:center;
  left:3.2%;
  margin-top:-9px;
  line-height:18px; }
`],
                providers: []
            },] },
];
/** @nocollapse */
NgxCarousel3dComponent.ctorParameters = () => [];
NgxCarousel3dComponent.propDecorators = {
    "options": [{ type: Input },],
    "slides": [{ type: Input },],
    "onBeforeChange": [{ type: Input },],
    "onLastSlide": [{ type: Input },],
    "onSlideChange": [{ type: Input },],
    "onSelectedClick": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxCarousel3dSlideComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
NgxCarousel3dSlideComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-carousel-3d-slide',
                template: `<div class="slide-3d">
      <ng-content></ng-content>
</div>
`,
                styles: [`.slide-3d{
  border-radius:4px;
  border-color:#000;
  border-color:rgba(0, 0, 0, 0.4);
  border-style:solid;
  background-size:cover;
  height:100%; }
.slide-3d figure img{
  width:100%; }
.slide-3d figure figcaption{
  position:absolute;
  background:rgba(0, 0, 0, 0.5);
  color:#fff;
  width:100%;
  left:0;
  bottom:0;
  font-weight:normal;
  text-align:center;
  padding:7px 10px; }
`]
            },] },
];
/** @nocollapse */
NgxCarousel3dSlideComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxCarousel3dModule {
}
NgxCarousel3dModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    NgxCarousel3dComponent,
                    NgxCarousel3dSlideComponent
                ],
                exports: [
                    NgxCarousel3dComponent,
                    NgxCarousel3dSlideComponent
                ]
            },] },
];
/** @nocollapse */
NgxCarousel3dModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NgxCarousel3dModule, NgxCarousel3dSlideComponent as ɵb, NgxCarousel3dComponent as ɵa };
//# sourceMappingURL=ngx-carousel-3d.js.map
